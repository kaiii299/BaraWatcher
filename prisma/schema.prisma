datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  emailVerified Boolean
  creditScore   Int           @default(50) // Optional, related to your weightage system
  balance       BigInt        @default(0)
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Transaction   Transaction[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TokenPool {
  id          Int      @id @default(autoincrement())
  totalTokens BigInt   @default(100000000000) // 100 billion tokens
  allocated   BigInt   @default(0) // Allocated tokens
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id        Int             @id @default(autoincrement())
  userId    String
  type      TransactionType
  amount    BigInt // Number of tokens transferred
  createdAt DateTime        @default(now())
  note      String? // Optional note or reason for the transaction

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  ALLOCATION // Allocating tokens to a user
  TRANSFER // User-to-user transfer
  WITHDRAWAL // Tokens removed or burned
  REWARD // Reward for activity
}
