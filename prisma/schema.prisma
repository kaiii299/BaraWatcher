datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  emailVerified Boolean
  creditScore   Int
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@map("user")
  Wallet Wallet[]
}

// Every user can connect to one metamask wallet
model Wallet {
  id            String   @id
  address       String
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isConnected   Boolean  @default(true)
  connectedAt   DateTime @default(now())
  lastActive    DateTime @updatedAt

  @@unique([address])
  @@map("wallet")
}

model Session {
  id        String   @id  
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Note {
  id               Int           @id @default(autoincrement())
  content         String
  type           String
  status         String        @default("pending")
  credibilityScore Int
  imageUrl       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  comments       NoteComment[]

  @@map("note")
}

model NoteComment {
  id            Int      @id @default(autoincrement())
  text          String
  volunteerName String
  date          DateTime
  noteId        Int
  note          Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("note_comment")
}